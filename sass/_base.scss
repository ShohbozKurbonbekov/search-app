$search-bar-border: #e6e6e6;
$stats-color: #70757a;
$clear-button-color: #d9d9d9;
$background-color: #fff;
$font-color: #000;
$logo-blue: #4885ed;
$logo-red: #db3236;
$logo-yellow: #ffc107;
$logo-green: #3cba54;
$link-color: #1a0dab;
$link-visited-color: #000;
$link-outline-color: #000;
$font-stack: "Roboto", Arial, sans-serif;

%flex {
  display: flex;
  align-items: center;
}

@mixin flexColumn {
  @extend %flex;
  flex-direction: column;
  justify-content: flex-start;
}

@mixin flexCenter {
  @extend %flex;
  justify-content: center;
}

@mixin mediaQuery($size) {
  @media only screen and (min-width: $size) {
    @content;
  }
}
* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

body,
html {
  background-color: $background-color;
  color: $font-color;
  width: 100vw;
  min-height: 100vh;
  font-family: $font-stack;
  font-size: 22px;
}

main {
  @include flexColumn;
  min-height: calc(100vh - 60px);
}

footer {
  width: 100%;
  height: 60px;
  @include flexCenter;

  p {
    color: $stats-color;
    font-size: 0.5rem;
    @include mediaQuery(768px) {
      font-size: 1rem;
    }
    a {
      color: $stats-color;
    }
  }
}

img {
  display: block;
}
// "display:block" = Vertical spacing: Block-level elements have a margin between them, which can cause images to appear with extra space below them. You might need to adjust the margins or padding to control the spacing between images.

// "%" =  % symbol is used for defining placeholder selectors in Sass.  A placeholder selector is like a class or an ID selector, but it doesn't appear in the compiled CSS unless it's extended. It helps in creating reusable styles that can be shared among multiple selectors without outputting unnecessary code.
// %common-style {
//     color: red;
//     font-size: 16px;
//   }

//   .button {
//     @extend %common-style;
//     padding: 10px;
//     background-color: blue;
//   }

//   .link {
//     @extend %common-style;
//     text-decoration: underline;
//   }

// "$" = In Sass, the $ symbol is used to define variables. Variables in Sass allow you to store values (like colors, fonts, sizes, etc.) and reuse them throughout your stylesheet.
// "@mixin" = In Sass, @mixin is used to define reusable blocks of code (similar to functions in programming). Mixins allow you to write a set of styles once and include them wherever needed in your stylesheet, optionally with parameters for added flexibility.

// "@extend" = In Sass, @extend is used to share styles between selectors. It allows one selector to inherit the styles of another.

// "@include" = In Sass, @include is used to apply the styles defined in a mixin. - @include mixin-name;
